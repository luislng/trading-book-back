// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingBook.Infraestructure.Context;

#nullable disable

namespace TradingBook.Infraestructure.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TradingBook.Model.Entity.CryptoCurrencyEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountInvest")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("BuyDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CryptoPrice")
                        .HasColumnType("TEXT");

                    b.Property<uint>("CryptoReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrencyFromId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrencyToId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ExchangedAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FeeInvest")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnFee")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("SellDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellLimit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CryptoReferenceId");

                    b.HasIndex("CurrencyFromId");

                    b.HasIndex("CurrencyToId");

                    b.ToTable("CryptoCurrency");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.CryptoCurrencyReferenceEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CryptoCurrencyReference");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Code = "BTCEUR",
                            Name = "BTC-EUR"
                        },
                        new
                        {
                            Id = 2u,
                            Code = "SUIEUR",
                            Name = "SUI-EUR"
                        });
                });

            modelBuilder.Entity("TradingBook.Model.Entity.CurrencyEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Code = "EUR",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = 2u,
                            Code = "USD",
                            Name = "Dollar"
                        },
                        new
                        {
                            Id = 3u,
                            Code = "BTC",
                            Name = "BTC"
                        },
                        new
                        {
                            Id = 4u,
                            Code = "SUI",
                            Name = "SUI"
                        },
                        new
                        {
                            Id = 5u,
                            Code = "GTC",
                            Name = "GTC"
                        });
                });

            modelBuilder.Entity("TradingBook.Model.Entity.DepositEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Deposit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0.0m);

                    b.Property<DateTimeOffset>("DepositDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.StockEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("BuyDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Fee")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnFee")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnStockPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("SellDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellLimit")
                        .HasColumnType("TEXT");

                    b.Property<uint>("StockReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StockReferenceId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.StockReferenceEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StockReference");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Code = "MSFT",
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 2u,
                            Code = "TSM",
                            Name = "TaiwanSemiCond"
                        });
                });

            modelBuilder.Entity("TradingBook.Model.Entity.CryptoCurrencyEntity", b =>
                {
                    b.HasOne("TradingBook.Model.Entity.CryptoCurrencyReferenceEntity", "CryptoReference")
                        .WithMany("CryptoCurrencyReferences")
                        .HasForeignKey("CryptoReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingBook.Model.Entity.CurrencyEntity", "CurrencyFrom")
                        .WithMany("CryptoCurrenciesFrom")
                        .HasForeignKey("CurrencyFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingBook.Model.Entity.CurrencyEntity", "CurrencyTo")
                        .WithMany("CryptoCurrenciesTo")
                        .HasForeignKey("CurrencyToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CryptoReference");

                    b.Navigation("CurrencyFrom");

                    b.Navigation("CurrencyTo");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.StockEntity", b =>
                {
                    b.HasOne("TradingBook.Model.Entity.CurrencyEntity", "Currency")
                        .WithMany("Stocks")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingBook.Model.Entity.StockReferenceEntity", "StockReference")
                        .WithMany("Stocks")
                        .HasForeignKey("StockReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("StockReference");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.CryptoCurrencyReferenceEntity", b =>
                {
                    b.Navigation("CryptoCurrencyReferences");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.CurrencyEntity", b =>
                {
                    b.Navigation("CryptoCurrenciesFrom");

                    b.Navigation("CryptoCurrenciesTo");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("TradingBook.Model.Entity.StockReferenceEntity", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
